// <auto-generated />
using System;
using DBController;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBController.Migrations
{
    [DbContext(typeof(DBControllerCtx))]
    partial class DBControllerCtxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DBController.Models.TeamRoles", b =>
                {
                    b.Property<int>("TeamRole_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamRole_Id"));

                    b.Property<int>("TeamRole_Level")
                        .HasColumnType("int");

                    b.Property<string>("TeamRole_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamRole_Id");

                    b.ToTable("TeamRoles");

                    b.HasData(
                        new
                        {
                            TeamRole_Id = 1,
                            TeamRole_Level = 1,
                            TeamRole_Name = "Leader"
                        },
                        new
                        {
                            TeamRole_Id = 2,
                            TeamRole_Level = 2,
                            TeamRole_Name = "SubLeader"
                        },
                        new
                        {
                            TeamRole_Id = 3,
                            TeamRole_Level = 3,
                            TeamRole_Name = "Member"
                        });
                });

            modelBuilder.Entity("DBController.Models.Teams", b =>
                {
                    b.Property<int>("Team_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Team_Id"));

                    b.Property<string>("Team_Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("Team_Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Team_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Team_Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DBController.Models.UserRoles", b =>
                {
                    b.Property<int>("UserRole_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRole_Id"));

                    b.Property<int>("UserRole_Level")
                        .HasColumnType("int");

                    b.Property<string>("UserRole_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserRole_Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRole_Id = 1,
                            UserRole_Level = 1,
                            UserRole_Name = "Admin"
                        },
                        new
                        {
                            UserRole_Id = 2,
                            UserRole_Level = 2,
                            UserRole_Name = "Advanced User"
                        },
                        new
                        {
                            UserRole_Id = 3,
                            UserRole_Level = 3,
                            UserRole_Name = "User"
                        },
                        new
                        {
                            UserRole_Id = 4,
                            UserRole_Level = 4,
                            UserRole_Name = "Restricted Group"
                        });
                });

            modelBuilder.Entity("DBController.Models.UserTeamRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TeamRole_Id")
                        .HasColumnType("int");

                    b.Property<int>("Team_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamRole_Id");

                    b.HasIndex("Team_Id");

                    b.HasIndex("User_Id")
                        .IsUnique();

                    b.ToTable("UserTeamRole");
                });

            modelBuilder.Entity("DBController.Models.User_UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserRole_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRole_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("User_UserRoles");
                });

            modelBuilder.Entity("DBController.Models.Users", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"));

                    b.Property<string>("User_Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("User_TeamId")
                        .HasColumnType("int");

                    b.HasKey("User_Id");

                    b.HasIndex("User_TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DBController.Models.UserTeamRole", b =>
                {
                    b.HasOne("DBController.Models.TeamRoles", "TeamRole")
                        .WithMany()
                        .HasForeignKey("TeamRole_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBController.Models.Teams", "Team")
                        .WithMany()
                        .HasForeignKey("Team_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBController.Models.Users", "User")
                        .WithOne("UserTeamRole")
                        .HasForeignKey("DBController.Models.UserTeamRole", "User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("TeamRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DBController.Models.User_UserRoles", b =>
                {
                    b.HasOne("DBController.Models.UserRoles", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRole_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBController.Models.Users", "User")
                        .WithMany("User_UserRoles")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("DBController.Models.Users", b =>
                {
                    b.HasOne("DBController.Models.Teams", "User_Team")
                        .WithMany("Users")
                        .HasForeignKey("User_TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User_Team");
                });

            modelBuilder.Entity("DBController.Models.Teams", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DBController.Models.Users", b =>
                {
                    b.Navigation("UserTeamRole")
                        .IsRequired();

                    b.Navigation("User_UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
